# Функция с параметрами по умолчанию:


def print_params(a = 1, b = 'строка', c = True):
    return print(a, b, c)

print_params()

# Вызовы функции с разным количеством аргументов.


print_params() # функция работает, так как мы указали 3 параметра по умолчанию.

# print_params(3, 5, 2, 4) # не работает, так как аргументов должно быть всего 3, а указано - 4 (все вызовы, что имеют
# больше 3-х аргументов, по той же причине, не сработают.

print_params(3, 5) # работает, так как мы указали c параметром по умолчанию, что дало нам результат, записанный
# ранее при вызове. Значение b при этом мы легко переопределили на integer, так как функция этого не запрещает.

print_params(True) # работает, по причине аналогичной, когда у нас есть значения по-умолчанию, где a мы переопределили
# на boolean.

print_params(b = 25) # работает, так как у нас все остальные параметры указаны по умолчанию и выводятся без проблем.

print_params(c = [1,2,3]) # работает, так как количество аргументов соответствует количеству параметров функции
# print_params()


# Распаковка параметров:


values_list = [True, "Hello", [6, 3, 5]]

values_dict = {'a': False, 'b': 2, 'c': "None"}

print_params(*values_list)
print_params(**values_dict)

# Распаковка + отдельные параметры:


values_list_2 = [[4, True, 'String'], (4, 'Laught')]
print_params(*values_list_2, 42)